// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.1
// source: fibonacci.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FibonacciService_GetFibonacciNumber_FullMethodName   = "/fibonacci.FibonacciService/GetFibonacciNumber"
	FibonacciService_GetFibonacciSequence_FullMethodName = "/fibonacci.FibonacciService/GetFibonacciSequence"
)

// FibonacciServiceClient is the client API for FibonacciService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonacciServiceClient interface {
	GetFibonacciNumber(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error)
	GetFibonacciSequence(ctx context.Context, in *FibonacciSequenceRequest, opts ...grpc.CallOption) (*FibonacciSequenceResponse, error)
}

type fibonacciServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciServiceClient(cc grpc.ClientConnInterface) FibonacciServiceClient {
	return &fibonacciServiceClient{cc}
}

func (c *fibonacciServiceClient) GetFibonacciNumber(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FibonacciResponse)
	err := c.cc.Invoke(ctx, FibonacciService_GetFibonacciNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciServiceClient) GetFibonacciSequence(ctx context.Context, in *FibonacciSequenceRequest, opts ...grpc.CallOption) (*FibonacciSequenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FibonacciSequenceResponse)
	err := c.cc.Invoke(ctx, FibonacciService_GetFibonacciSequence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibonacciServiceServer is the server API for FibonacciService service.
// All implementations must embed UnimplementedFibonacciServiceServer
// for forward compatibility
type FibonacciServiceServer interface {
	GetFibonacciNumber(context.Context, *FibonacciRequest) (*FibonacciResponse, error)
	GetFibonacciSequence(context.Context, *FibonacciSequenceRequest) (*FibonacciSequenceResponse, error)
	mustEmbedUnimplementedFibonacciServiceServer()
}

// UnimplementedFibonacciServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFibonacciServiceServer struct {
}

func (UnimplementedFibonacciServiceServer) GetFibonacciNumber(context.Context, *FibonacciRequest) (*FibonacciResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFibonacciNumber not implemented")
}
func (UnimplementedFibonacciServiceServer) GetFibonacciSequence(context.Context, *FibonacciSequenceRequest) (*FibonacciSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFibonacciSequence not implemented")
}
func (UnimplementedFibonacciServiceServer) mustEmbedUnimplementedFibonacciServiceServer() {}

// UnsafeFibonacciServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibonacciServiceServer will
// result in compilation errors.
type UnsafeFibonacciServiceServer interface {
	mustEmbedUnimplementedFibonacciServiceServer()
}

func RegisterFibonacciServiceServer(s grpc.ServiceRegistrar, srv FibonacciServiceServer) {
	s.RegisterService(&FibonacciService_ServiceDesc, srv)
}

func _FibonacciService_GetFibonacciNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServiceServer).GetFibonacciNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibonacciService_GetFibonacciNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServiceServer).GetFibonacciNumber(ctx, req.(*FibonacciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FibonacciService_GetFibonacciSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServiceServer).GetFibonacciSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibonacciService_GetFibonacciSequence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServiceServer).GetFibonacciSequence(ctx, req.(*FibonacciSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FibonacciService_ServiceDesc is the grpc.ServiceDesc for FibonacciService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibonacciService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fibonacci.FibonacciService",
	HandlerType: (*FibonacciServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFibonacciNumber",
			Handler:    _FibonacciService_GetFibonacciNumber_Handler,
		},
		{
			MethodName: "GetFibonacciSequence",
			Handler:    _FibonacciService_GetFibonacciSequence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fibonacci.proto",
}
